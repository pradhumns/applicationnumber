import { LightningElement, wire, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { NavigationMixin } from 'lightning/navigation';
import searchKeyword from '@salesforce/apex/TmwatchDigit.searchKeyword';
import saveSelectedRecords from '@salesforce/apex/TmwatchDigit.saveSelectedRecords';

const columns = [
    { label: 'FileNumber', fieldName: 'FileNumber' },
    { label: 'ApplicationNumber', fieldName: 'ApplicationNumber' },
    { label: 'Applicants', fieldName: 'Applicants' },
    { label: 'TmWatch', fieldName: 'TmWatch' },
    { label: 'MatterTitle', fieldName: 'MatterTitle' },
    { label: 'Search Result', fieldName: 'searchResult' }, // Add the Search Result column
    { type: 'checkbox', label: 'Select', fieldName: 'isSelected' },
];

export default class MyTableComponent extends NavigationMixin(LightningElement) {
    chr = 0;
    searchResults = [];
    selectedRecords = [];
    columns = columns;
    selectAll = false;
    fixedWidth = "width:30rem;";
    searchTerm = '';
    searchByApplicationNumber = false; 
    


    
 
    //FOR HANDLING THE HORIZONTAL SCROLL OF TABLE MANUALLY
    tableOuterDivScrolled(event) {
        this._tableViewInnerDiv = this.template.querySelector(".tableViewInnerDiv");
        if (this._tableViewInnerDiv) {
            if (!this._tableViewInnerDivOffsetWidth || this._tableViewInnerDivOffsetWidth === 0) {
                this._tableViewInnerDivOffsetWidth = this._tableViewInnerDiv.offsetWidth;
            }
            this._tableViewInnerDiv.style = 'width:' + (event.currentTarget.scrollLeft + this._tableViewInnerDivOffsetWidth) + "px;" + this.tableBodyStyle;
        }
        this.tableScrolled(event);
    }
 
    tableScrolled(event) {
        if (this.enableInfiniteScrolling) {
            if ((event.target.scrollTop + event.target.offsetHeight) >= event.target.scrollHeight) {
                this.dispatchEvent(new CustomEvent('showmorerecords', {
                    bubbles: true
                }));
            }
        }
        if (this.enableBatchLoading) {
            if ((event.target.scrollTop + event.target.offsetHeight) >= event.target.scrollHeight) {
                this.dispatchEvent(new CustomEvent('shownextbatch', {
                    bubbles: true
                }));
            }
        }
    }
 
    //#region ***************** RESIZABLE COLUMNS *************************************/
    handlemouseup(e) {
        this._tableThColumn = undefined;
        this._tableThInnerDiv = undefined;
        this._pageX = undefined;
        this._tableThWidth = undefined;
    }
 
    handlemousedown(e) {
        if (!this._initWidths) {
            this._initWidths = [];
            let tableThs = this.template.querySelectorAll("table thead .dv-dynamic-width");
            tableThs.forEach(th => {
                this._initWidths.push(th.style.width);
            });
        }
 
        this._tableThColumn = e.target.parentElement;
        this._tableThInnerDiv = e.target.parentElement;
        while (this._tableThColumn.tagName !== "TH") {
            this._tableThColumn = this._tableThColumn.parentNode;
        }
        while (!this._tableThInnerDiv.className.includes("slds-cell-fixed")) {
            this._tableThInnerDiv = this._tableThInnerDiv.parentNode;
        }
        console.log("handlemousedown this._tableThColumn.tagName => ", this._tableThColumn.tagName);
        this._pageX = e.pageX;
 
        this._padding = this.paddingDiff(this._tableThColumn);
 
        this._tableThWidth = this._tableThColumn.offsetWidth - this._padding;
        console.log("handlemousedown this._tableThColumn.tagName => ", this._tableThColumn.tagName);
    }
 
    handlemousemove(e) {
        console.log("mousemove this._tableThColumn => ", this._tableThColumn);
        if (this._tableThColumn && this._tableThColumn.tagName === "TH") {
            this._diffX = e.pageX - this._pageX;
 
            this.template.querySelector("table").style.width = (this.template.querySelector("table") - (this._diffX)) + 'px';
 
            this._tableThColumn.style.width = (this._tableThWidth + this._diffX) + 'px';
            this._tableThInnerDiv.style.width = this._tableThColumn.style.width;
 
            let tableThs = this.template.querySelectorAll("table thead .dv-dynamic-width");
            let tableBodyRows = this.template.querySelectorAll("table tbody tr");
            let tableBodyTds = this.template.querySelectorAll("table tbody .dv-dynamic-width");
            tableBodyRows.forEach(row => {
                let rowTds = row.querySelectorAll(".dv-dynamic-width");
                rowTds.forEach((td, ind) => {
                    rowTds[ind].style.width = tableThs[ind].style.width;
                });
            });
        }
    }
 
    handledblclickresizable() {
        let tableThs = this.template.querySelectorAll("table thead .dv-dynamic-width");
        let tableBodyRows = this.template.querySelectorAll("table tbody tr");
        tableThs.forEach((th, ind) => {
            th.style.width = this._initWidths[ind];
            th.querySelector(".slds-cell-fixed").style.width = this._initWidths[ind];
        });
        tableBodyRows.forEach(row => {
            let rowTds = row.querySelectorAll(".dv-dynamic-width");
            rowTds.forEach((td, ind) => {
                rowTds[ind].style.width = this._initWidths[ind];
            });
        });
    }
 
    paddingDiff(col) {
 
        if (this.getStyleVal(col, 'box-sizing') === 'border-box') {
            return 0;
        }
 
        this._padLeft = this.getStyleVal(col, 'padding-left');
        this._padRight = this.getStyleVal(col, 'padding-right');
        return (parseInt(this._padLeft, 10) + parseInt(this._padRight, 10));
 
    }
 
    getStyleVal(elm, css) {
        return (window.getComputedStyle(elm, null).getPropertyValue(css))
    }

/* close(){
		setTimeout(
			function() {
				window.history.back();
			},
			1000
		);
	}*/

    close() {
        // Navigate to the TmWatch object's Recent list view.
        this[NavigationMixin.Navigate]({
            type: 'standard__objectPage',
            attributes: {
                objectApiName: 'TM_Watch__c',
                actionName: 'list'
            },
            state: {
                // 'filterName' is a property on 'state'
                // and identifies the target list view.
                // It may also be an 18 character list view id.
                // or by 18 char '00BT0000002TONQMA4'
                filterName: 'Recent' 
            }
        });
    }

    handleInputChange(event) {
        this.chr = parseInt(event.target.value, 10);
    }

    handleSearchOptionChange(event) {
        this.searchByApplicationNumber = event.target.checked;
    }

    search() {
        // Perform the search based on application number
        searchKeyword({ searchTerm: this.searchTerm, searchByApplicationNumber: this.searchByApplicationNumber })
            .then(result => {
                this.searchResults = result.map(item => ({ ...item, isSelected: false }));
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    


    handleCheckboxChange(event) {
        const recordId = event.target.dataset.id;
        const selectedRecord = this.searchResults.find(record => record.Id === recordId);
        if (selectedRecord) {
            selectedRecord.isSelected = !selectedRecord.isSelected;
        }
        this.selectAll = this.searchResults.every(record => record.isSelected);
        this.selectedRecords = this.searchResults
            .filter(record => record.isSelected)
            .map(record => ({
                Applicants: record.Applicants,
                TmWatch: record.TmWatch,
                MatterTitle: record.MatterTitle,
                ApplicationNumber:record.ApplicationNumber,
                FileNumber:record.FileNumber
            }));
    }

    handleSelectAll(event) {
        this.selectAll = event.target.checked;
        this.searchResults = this.searchResults.map(record => ({
            ...record,
            isSelected: this.selectAll
        }));
        this.selectedRecords = this.selectAll
            ? this.searchResults.map(record => ({
                Applicants: record.Applicants,
                TmWatch: record.TmWatch,
                MatterTitle: record.MatterTitle,
                ApplicationNumber:record.ApplicationNumber,
                FileNumber:record.FileNumber
            }))
            : [];
    }


    
    submitSelectedRecords() {
        const selectedRecords = this.searchResults
            .filter(record => record.isSelected)
            .map(record => ({
                isSelected: record.isSelected,
                MatterTitle: record.MatterTitle
            }));
    
        // Call the new Apex method to insert records into TM_Result__c object
        saveSelectedRecords({ selectedRecords })
            .then(() => {
                // Reset the selection and do any necessary UI updates
                this.resetSelection();
                // Show success message
                this.showToast('Success', 'Records submitted successfully', 'success');
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    showToast(title, message, variant) {
        const toastEvent = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant,
        });
        this.dispatchEvent(toastEvent);
    }

    
    // Navigation to lightning component for search by digit
    navigateToLightningComponent() {
        let cmpDef = {
          componentDef: "c:tmWatchLogicSearch"
        };
    
        let encodedDef = btoa(JSON.stringify(cmpDef));
        this[NavigationMixin.Navigate]({
          type: "standard__webPage",
          attributes: {
            url: "/one/one.app#" + encodedDef
          }
        });
      }
    


}
